openapi: 3.0.1
info:
  title: Car models service
  description: The microservice to manage car models
  version: "1.0"
servers:
- url: http://localhost:8180
  description: Generated server url
paths:
  /v1/manufacturers/{manufacturer}/models/{name}/{year}:
    get:
      tags:
      - model-controller
      summary: "Get a model by its manufacturer, name and year"
      operationId: getModelByManufacturerAndNameAndYear
      parameters:
      - name: manufacturer
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelDto'
              examples:
                model:
                  description: model
                  value:
                  - id: "1"
                    name: A7
                    year: "2023"
                    manufacturer: Audi
                    categories:
                    - SUV
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    put:
      tags:
      - model-controller
      summary: Update a model
      operationId: updateModel
      parameters:
      - name: manufacturer
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDto'
            examples:
              model:
                description: model
                value:
                  id: null
                  name: null
                  year: null
                  manufacturer: null
                  categories:
                  - Sedan
        required: true
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    post:
      tags:
      - model-controller
      summary: Save a model
      operationId: saveModel
      parameters:
      - name: manufacturer
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDto'
            examples:
              model:
                description: model
                value:
                  id: null
                  name: null
                  year: null
                  manufacturer: null
                  categories:
                  - Sedan
        required: true
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          headers:
            Location:
              description: "/v1/models/{id}"
              style: simple
              schema:
                type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
  /v1/model-names:
    get:
      tags:
      - model-name-controller
      summary: Get all names of the models
      operationId: getAllModelNames
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageModelNameDto'
      security:
      - bearerAuth: []
    post:
      tags:
      - model-name-controller
      summary: Save a name of the models
      operationId: saveModelName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelNameDto'
            examples:
              modelName:
                description: modelName
                value:
                  name: A7
        required: true
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          headers:
            Location:
              description: "/v1/names/{name}"
              style: simple
              schema:
                type: string
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
  /v1/manufacturers:
    get:
      tags:
      - manufacturer-controller
      summary: Get all manufacturers
      operationId: getAllManufacturers
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageManufacturerDto'
      security:
      - bearerAuth: []
    post:
      tags:
      - manufacturer-controller
      summary: Save a manufacturer
      operationId: saveManufacturer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManufacturerDto'
            examples:
              manufacturer:
                description: manufacturer
                value:
                  name: Audi
        required: true
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          headers:
            Location:
              description: "/v1/manufacturers/{name}"
              style: simple
              schema:
                type: string
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
  /v1/categories:
    get:
      tags:
      - category-controller
      summary: Get all categories
      operationId: getAllCategories
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCategoryDto'
      security:
      - bearerAuth: []
    post:
      tags:
      - category-controller
      summary: Save a category
      operationId: saveCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
            examples:
              category:
                description: category
                value:
                  name: SUV
        required: true
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          headers:
            Location:
              description: "/v1/categories/{name}"
              style: simple
              schema:
                type: string
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
  /v1/models:
    get:
      tags:
      - model-controller
      summary: Search models
      operationId: searchModels
      parameters:
      - name: model
        in: query
        required: false
        schema:
          type: string
      - name: category
        in: query
        required: false
        schema:
          type: string
      - name: manufacturer
        in: query
        required: false
        schema:
          type: string
      - name: maxYear
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: minYear
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: year
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageModelDto'
      security:
      - bearerAuth: []
  /v1/models/{id}:
    get:
      tags:
      - model-controller
      summary: Get a model by its id
      operationId: getModelById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelDto'
              examples:
                model:
                  description: model
                  value:
                  - id: "1"
                    name: A7
                    year: "2023"
                    manufacturer: Audi
                    categories:
                    - Sedan
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    delete:
      tags:
      - model-controller
      summary: Delete a model by its id
      operationId: deleteModelById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
      security:
      - bearerAuth: []
  /v1/model-names/{name}:
    get:
      tags:
      - model-name-controller
      summary: Get a name of the models by the name
      operationId: getModelNameByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelNameDto'
              examples:
                modelName:
                  description: modelName
                  value:
                  - name: A7
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    delete:
      tags:
      - model-name-controller
      summary: Delete a name of the models by the name
      operationId: deleteModelNameByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
      security:
      - bearerAuth: []
  /v1/manufacturers/{name}:
    get:
      tags:
      - manufacturer-controller
      summary: Get a manufacturer by its name
      operationId: getManufacturerByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManufacturerDto'
              examples:
                manufacturer:
                  description: manufacturer
                  value:
                  - name: Audi
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    delete:
      tags:
      - manufacturer-controller
      summary: Delete a manufacturer by its name
      operationId: deleteManufacturerByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
      security:
      - bearerAuth: []
  /v1/categories/{name}:
    get:
      tags:
      - category-controller
      summary: Get a category by its name
      operationId: getCategoryByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
              examples:
                category:
                  description: category
                  value:
                  - name: SUV
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - bearerAuth: []
    delete:
      tags:
      - category-controller
      summary: Delete a category by its name
      operationId: deleteCategoryByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "405":
          description: Method Not Allowed
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
      security:
      - bearerAuth: []
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
        violations:
          type: array
          items:
            $ref: '#/components/schemas/Violation'
    Violation:
      type: object
      properties:
        attribute:
          type: string
        message:
          type: string
    ModelDto:
      required:
      - categories
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: integer
          format: int32
        manufacturer:
          type: string
        categories:
          uniqueItems: true
          type: array
          items:
            type: string
    ModelNameDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    ManufacturerDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    CategoryDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    PageModelDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ModelDto'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PageModelNameDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ModelNameDto'
        empty:
          type: boolean
    PageManufacturerDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ManufacturerDto'
        empty:
          type: boolean
    PageCategoryDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDto'
        empty:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
